name: 'Complete Deployment Pipeline'
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  # Step 1: Check and Use Existing Infrastructure
  check-infra:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    outputs:
      s3_bucket_name: ${{ steps.infra-check.outputs.s3_bucket_name }}
      eks_cluster_name: ${{ steps.infra-check.outputs.eks_cluster_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Check Infrastructure Status
        id: infra-check
        run: |
          cd infra
          terraform init
          
          # Check if infrastructure exists
          if terraform output -json s3_bucket_name >/dev/null 2>&1; then
            echo "Infrastructure already exists, using existing resources"
            S3_BUCKET_NAME=$(terraform output -json s3_bucket_name | jq -r '.')
            EKS_CLUSTER_NAME=$(terraform output -json eks_cluster_name | jq -r '.')
            echo "s3_bucket_name=$S3_BUCKET_NAME" >> $GITHUB_OUTPUT
            echo "eks_cluster_name=$EKS_CLUSTER_NAME" >> $GITHUB_OUTPUT
            echo "Using existing S3 Bucket: $S3_BUCKET_NAME"
            echo "Using existing EKS Cluster: $EKS_CLUSTER_NAME"
          else
            echo "Infrastructure not found. Please run the 'Manage Infrastructure' workflow first."
            echo "Go to Actions â†’ 'Manage Infrastructure' â†’ Run workflow â†’ Apply"
            exit 1
          fi

  # Step 2: Upload Dataset to S3
  upload-data:
    runs-on: ubuntu-latest
    needs: check-infra
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      S3_BUCKET: ${{ needs.provision-infra.outputs.s3_bucket_name }}
      S3_KEY: House_Rent_Dataset.csv
      LOCAL_PATH: data/House_Rent_Dataset.csv
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: pip install boto3
      - name: Upload data to S3
        run: |
          echo "Uploading to S3 bucket: $S3_BUCKET"
          python upload_data_to_s3.py

  # Step 3: Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [check-infra, upload-data]
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPO_SPARK: ml-crash-course-spark
      ECR_REPO_API: ml-crash-course-api
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Create ECR repositories
        run: |
          # Create Spark jobs repository
          aws ecr describe-repositories --repository-names $ECR_REPO_SPARK --region $AWS_REGION || \
          aws ecr create-repository --repository-name $ECR_REPO_SPARK --region $AWS_REGION
          
          # Create Model API repository
          aws ecr describe-repositories --repository-names $ECR_REPO_API --region $AWS_REGION || \
          aws ecr create-repository --repository-name $ECR_REPO_API --region $AWS_REGION
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push Spark job image
        run: |
          docker build -t $ECR_REPO_SPARK:latest -f spark_jobs/Dockerfile ./spark_jobs
          docker tag $ECR_REPO_SPARK:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_SPARK:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_SPARK:latest
      - name: Build and push Model API image
        run: |
          docker build -t $ECR_REPO_API:latest -f model_api/Dockerfile ./model_api
          docker tag $ECR_REPO_API:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_API:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_API:latest

  # Step 4: Deploy to EKS
  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: [check-infra, upload-data, build-and-push]
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPO_API: ml-crash-course-api
      EKS_CLUSTER_NAME: ${{ needs.provision-infra.outputs.eks_cluster_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Update kubeconfig
        run: |
          echo "Configuring kubectl for EKS cluster: $EKS_CLUSTER_NAME"
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME
      - name: Set up Helm
        uses: azure/setup-helm@v3
      - name: Deploy Airflow via Helm
        run: |
          helm repo add apache-airflow https://airflow.apache.org
          helm repo update
          helm upgrade --install airflow apache-airflow/airflow -f k8s/airflow/values.yaml --namespace airflow --create-namespace
      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.43.1/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
      - name: Substitute ECR_IMAGE_URI in model API deployment
        run: |
          ECR_IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_API:latest"
          yq e '.spec.template.spec.containers[0].image = env(ECR_IMAGE_URI)' k8s/model_api/deployment.yaml > k8s/model_api/deployment.sub.yaml
      - name: Deploy Model API
        run: |
          kubectl apply -f k8s/model_api/deployment.sub.yaml
          kubectl apply -f k8s/model_api/service.yaml
          kubectl patch service model-api -p '{"spec": {"ports": [{"port": 5001, "targetPort": 5000}]}}'
      - name: Deployment Complete
        run: |
          echo "ðŸŽ‰ Complete deployment pipeline finished successfully!"
          echo "Infrastructure: âœ…"
          echo "Data uploaded: âœ…"
          echo "Applications deployed: âœ…" 